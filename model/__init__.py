from schema import *
import random
from model.preprocessQuestions import PreprocessQuestions
from model.fowarding import Forwarding
from model.preprocessSVD import PreprocessSVD
from model.mail import send_email
Forwarding = Forwarding()
PreprocessQuestions = PreprocessQuestions()
PreprocessSVD = PreprocessSVD()

def find_tags(text, code):
    tags = PreprocessQuestions.getTags(text, 0.6)
    forwards = Forwarding.getTopK(tags, 5)
    print(tags, forwards)
    send_email(
        email=[
            "anurag.khanra306@gmail.com",
            "i.arvindkrishna@gmail.com",
            "jeevansamrudh0707@gmail.com",
            "rmrahulmakhija74@gmail.com"
        ],
        subject="Forwarding mail to Top users",
        message="Hi, \n\nPlease find the question asked in the forum which could be relevant to you: \n<b>" + text + "</b>\n\nThanks"
    )
    return Tags_response(tags = tags, forwards = forwards)
    # return Tags_response(tags = [], forwards = [])

def find_vulns(text, code):
    vulns_binary = PreprocessSVD.getVuln(code, 0.4)
    vulns = []
    print(vulns_binary)
    vulns_list = [
        "CWE - 119 : Improper Restriction of Operations within the Bounds of a Memory Buffer",
        "CWE - 120 : Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
        "CWE - 469 : Use of Pointer Subtraction to Determine Size",
        "CWE - 476 : NULL Pointer Dereference",
        "CWE - other : Other"
    ]
    for i, vuln_name in enumerate(vulns_list):
        if vulns_binary[0][i] == 1:
            vulns.append(vuln_name)
    return Vuln_response(vulnerabilities=vulns)
    # return Vuln_response(vulnerabilities= [])

def call(text, code):
    tags = find_tags(text, code)
    vulns = find_vulns(text, code)
    return Response(Tagging_Response=tags, Vulnerabilities_Response=vulns)

